{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","message","className","ErrorNotification","Filter","props","value","newFilter","onChange","handleFilterChange","PersonForm","onSubmit","addName","newName","handleNameChange","newNumber","handleNumberChange","type","ListPersons","persons","filter","person","name","toLowerCase","includes","map","key","number","onClick","deletePerson","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","setMessage","errorMessage","setErrorMessage","useEffect","personService","initialPersons","updateNumber","changedPerson","returnedPerson","setTimeout","catch","error","p","event","target","preventDefault","personObject","find","window","confirm","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61a987da.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n  \n\nconst deletePerson = (id) => {\n  axios.delete(`${baseUrl}/${id}`)\n}\n\n\nexport default { getAll, create, update, deletePerson }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport './index.css'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"message\">\n      {message}\n    </div>\n  )\n}\n\nconst ErrorNotification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\n\nconst Filter = (props) => {\n  return(\n    <div>\n    filter shown with <input \n    value={props.newFilter} \n    onChange={props.handleFilterChange}\n    />\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  return(\n    <form onSubmit={props.addName}>\n    <div>\n      name: <input \n      value={props.newName} \n      onChange={props.handleNameChange}\n      />\n    </div>\n    <div>\n      number: <input \n      value={props.newNumber} \n      onChange={props.handleNumberChange}\n      />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n    </form> \n  )\n}\n\nconst ListPersons = (props) => {\n    const filteredNames = props.persons.filter(person => person.name.toLowerCase().includes(props.newFilter.toLowerCase()))\n    return filteredNames.map(person => <p key={person.name}>{person.name} {person.number}\n    <button onClick={() => props.deletePerson(person.id)}>delete</button></p>)  \n}\n\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [ message, setMessage ] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n        .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  const deletePerson = (id) => {\n    const person = persons.find(p => p.id === id)\n    if (window.confirm(\"Delete \" + person.name +\" ?\")) { \n      personService.deletePerson(id)\n      setPersons(persons.filter(p => p.id !== id))\n      setMessage(\"Deleted \" + person.name)\n      setTimeout(() => {\n        setMessage(null)\n      }, 5000)\n    }\n  }\n\n  const updateNumber = (person) => {\n    const id = person.id\n    const changedPerson = { ...person, number: newNumber }\n    personService\n      .update(id, changedPerson)\n        .then(returnedPerson => {\n          setMessage(\"Changed the number of \" + newName)\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n          setPersons(persons.map(person => person.id !== id ? person : returnedPerson))\n        })\n        .catch(error => {\n          setErrorMessage(\n            \"Information of \" + newName + \" has already been removed from server\"\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n          setPersons(persons.filter(p => p.id !== id))\n        })\n    setNewName('') \n    setNewNumber('')\n  }\n\n\n  const addName = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    const personNames = persons.map(person => person.name)\n\n    if (personNames.includes(newName)) {\n      const person = persons.find(p => p.name === newName)\n      if (window.confirm(person.name + \" is already added to phonebook, replace the old number with a new one?\")) { \n        updateNumber(person)\n      }\n    } else {\n      personService\n      .create(personObject)\n        .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n      setNewName('') \n      setNewNumber('')\n      setMessage(\"Added \" + newName)\n      setTimeout(() => {\n        setMessage(null)\n      }, 5000)\n      })\n      .catch(error => {\n        setErrorMessage(\"too short name or number\")\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n    }\n\n  }\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <ErrorNotification message={errorMessage} />\n      <Filter newFilter={newFilter} handleFilterChange={(event) => handleFilterChange(event)} />\n      <h2>Add a new</h2>\n      <PersonForm newName={newName} newNumber={newNumber} handleNameChange={(event) => handleNameChange(event)} \n      handleNumberChange={(event) => handleNumberChange(event)} addName={(event) => addName(event)}/>\n      <h2>Numbers</h2>\n      <ListPersons persons = {persons} newFilter={newFilter} deletePerson={(id) => deletePerson(id)} />\n    </div>\n  )\n\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n\n"],"sourceRoot":""}